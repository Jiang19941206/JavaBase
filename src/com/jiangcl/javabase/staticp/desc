static关键字

可以修饰的结构：方法，变量，修饰类(只能修饰内部类)，代码块
不能修饰构造方法的原因：
调用构造器本来就是为了给当前类开辟内存空间。而静态是当前类一加载就直接为对应成员开辟空间的。
构造器总是关联一个对象而被调用，所以把它声明为static是没有意义的。

一：
静态方法中不能调用非静态方法及参数的原因：
在静态方法中不能使用this和super关键字
因为this和super是针对对象而言，而静态方法是类加载的时候随之加载的，
此时还没有对象创建，所以不能调用静态方法和this、super关键字

静态方法中可以调用静态变量和静态方法的原因：
静态方法和静态变量是随着类加载时一同加载的，当在静态方法中调用调用静态变量或静态方法时是通过类直接调用的。

总结：静态方法早于对象加载到内存中，所以静态方法不能调用非静态属性和方法
例：
class Person{
    static String name

    public static void showName(){
        System.out.println(name);//此处的name其实是Person.name而非this.name
    }
}

二：
静态方法应用：单例模式
单例模式分为懒汉式，饿汉式
饿汉式：
        好处：线程安全
        坏处：类加载的时候就已经创建对象，占用内存空间，对象加载时间长
懒汉式：
        好处：延迟对象的创建，当有需要的时候才创建对象，避免内存占用
        坏处：线程不安全（可改进为线程安全）

 单例模式的优点：由于单例模式之生成一个实例，减少了系统开销。

三：
代码块：用于初始化类和对象，分为静态代码块和非静态代码块。
        代码块如果有修饰符的话，只能使用static关键字修饰
     非静态代码块：用static关键字修饰的代码块，随着类的加载而执行
     public class CodeBlock{

        //当 new CodeBlock()时执行此代码块，每创建一个对象，执行一次非静态代码块
        {
            System.out.println("this is normal code block");
        }

     }

     静态代码块：无任何修饰符修饰，随着对象的创建而运行
      public class CodeBlock{

              //当类加载时执行此代码块（只执行一次）
              static {
                  System.out.println("this is static code block");
              }

       }
       内部只能调用静态的属性和静态的方法